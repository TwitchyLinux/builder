[graphical_environment.post.install.non-latin-fonts]
if.not = ["features.essential"]
if.all = ["features.graphical"]
order_priority = 94
packages = ["fonts-indic", "fonts-noto", "fonts-noto-cjk", "fonts-noto-color-emoji"]


[graphical_environment.post.install.alacritty]
if.not = ["features.essential"]
if.all = ["features.graphical"]
order_priority = 93
do = [
  {action = 'mkdir', dir = '/alacritty-src'},
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/alacritty/alacritty', '/alacritty-src/alacritty']},
  {action = 'run', bin = 'git', args = ['-C', '/alacritty-src/alacritty', 'checkout', 'v0.6.0']},
  {action = 'run', bin = 'chown', args = ['-R', 'twl', '/alacritty-src/alacritty']},
  # TODO: Make username agnostic in below command.
  {action = 'run', bin = 'runuser', args = [
        '-l', '{{base.main_user.name}}',
        '-c', 'source $HOME/.cargo/env && cd /alacritty-src/alacritty && cargo build --release',
  ]},
  {action = 'run', bin = 'cp', args = ['/alacritty-src/alacritty/target/release/alacritty', '/usr/local/bin/alacritty']},
  {action = 'run', bin = 'cp', args = ['/alacritty-src/alacritty/extra/logo/alacritty-term.svg', '/usr/share/pixmaps/Alacritty.svg']},
  {action = 'run', bin = 'bash', args = ['-c', 'gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null']},
  {action = 'run', bin = 'rm', args = ['-rf', '/alacritty-src']},

  {action = 'mkdir', dir = '/home/twl/.config/alacritty'},
  {action = 'install-resource', from = '../alacritty/default-config.yaml', to = '/home/twl/.config/alacritty/alacritty.yml'},
  {action = 'install-resource', from = '../alacritty/schemes.yaml', to = '/home/twl/.config/alacritty/color-schemes.yml'},
  {action = 'install-resource', from = '../alacritty/alacritty-theme.license', to = '/home/twl/.config/alacritty/alacritty-theme.license'},
  {action = 'run', bin = 'chown', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/alacritty']},
  {action = 'run', bin = 'chgrp', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/alacritty']},
]

[graphical_environment.post.install.grim]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 93
packages = ["libjpeg-dev", "libcairo2-dev"]
do = [
  {action = 'mkdir', dir = '/grim-src'},
  {action = 'download', url = 'https://github.com/emersion/grim/archive/v1.3.1.tar.gz', to = '/grim-src/v1.3.1.tar.gz'},
  {action = 'sha256sum', from = '/grim-src/v1.3.1.tar.gz', expected = 'b1ab720b5dbcd560cfa34bbd7e0cbe85330f701c471b12e2489dfec15bcf216e'},
  {action = 'run', bin = 'tar', args = ['-C', '/grim-src', '-xvf', '/grim-src/v1.3.1.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /grim-src/grim-1.3.1 && meson build -Djpeg=enabled -Dman-pages=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /grim-src/grim-1.3.1 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/grim-src']},
]

[graphical_environment.post.install.slurp]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 92
packages = ["libjpeg-dev", "libcairo2-dev", "libxkbcommon-dev"]
do = [
  {action = 'mkdir', dir = '/slurp-src'},
  {action = 'download', url = 'https://github.com/emersion/slurp/archive/v1.3.1.tar.gz', to = '/slurp-src/v1.3.1.tar.gz'},
  {action = 'sha256sum', from = '/slurp-src/v1.3.1.tar.gz', expected = 'afe8714c6782a0e548b0f539676783a922ac61e7ba3fc7c0815644e72293fa3a'},
  {action = 'run', bin = 'tar', args = ['-C', '/slurp-src', '-xvf', '/slurp-src/v1.3.1.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /slurp-src/slurp-1.3.1 && meson build -Dman-pages=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /slurp-src/slurp-1.3.1 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/slurp-src']},
]

[graphical_environment.post.install.nmap-tools]
if.not = ["features.essential"]
if.all = ["features.graphical"]
order_priority = 90
packages = ["nmap", "ncat", "ndiff"]

[graphical_environment.post.install.gui-dev-tools]
if.all = ["features.graphical", "features.SWE"]
order_priority = 85
packages = ["gpick", "glade"]

[graphical_environment.post.install.cad-and-images]
if.all = ["features.graphical"]
if.any = ["features.av", "features.maker"]
order_priority = 80
packages = ["inkscape", "gthumb", "openscad"]

[graphical_environment.post.install.qemu-gui]
if.all = ["features.container_tools"]
order_priority = 80
packages = ["qemu-system-gui"]

[graphical_environment.post.install.wireshark]
if.not = ["features.essential"]
if.all = ["features.graphical"]
order_priority = 75
packages = ["wireshark"]

[graphical_environment.post.install.meld]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.SWE"]
order_priority = 75
packages = ["meld"]

[graphical_environment.post.install.chrome]
if.not = ["features.essential"]
if.all = ["features.graphical"]
order_priority = 50
do = [
  {action = 'download', url = 'https://dl.google.com/linux/linux_signing_key.pub', to = '/chrome-signing-key.pub'},
  {action = 'run', bin = 'apt-key', args = ['add', '/chrome-signing-key.pub']},
  {action = 'mkdir', dir = '/etc/apt/sources.list.d'},
  {action = 'append', to = '/etc/apt/sources.list.d/google-chrome.list', data = "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\n"},
  {action = 'run', bin = 'rm', args = ['/chrome-signing-key.pub']},
  {action = 'run', bin = 'apt-get', args = ['update']},
  {action = 'run', bin = 'apt-get', args = ['-y', 'install', 'google-chrome-stable']},
]

[graphical_environment.post.install.rawtherapee]
if.all = ["features.graphical", "features.av"]
order_priority = 40
packages = ["rawtherapee"]

[graphical_environment.post.install.kite]
if.all = ["features.graphical", "features.maker"]
order_priority = 40
do = [
  {action = 'download', url = 'https://github.com/twitchyliquid64/kcgen/releases/download/v0.3.0/kite_0.3.0_amd64.deb', to = '/kite_0.3.0_amd64.deb'},
  {action = 'sha256sum', from = '/kite_0.3.0_amd64.deb', expected = '8e533d7399d02c1df80bf02b211d3aeb05f2656f6fb9b3a0cb36e12a05c73201'},
  {action = 'run', bin = 'dpkg', args = ['-i', '/kite_0.3.0_amd64.deb']},
  {action = 'run', bin = 'rm', args = ['/kite_0.3.0_amd64.deb']},
]

[graphical_environment.post.install.kcgen]
if.all = ["features.graphical", "features.maker"]
order_priority = 40
do = [
  {action = 'download', url = 'https://github.com/twitchyliquid64/kcgen/releases/download/v0.3.0/kcgen_0.3.0_amd64.deb', to = '/kcgen_0.3.0_amd64.deb'},
  {action = 'sha256sum', from = '/kcgen_0.3.0_amd64.deb', expected = 'd86c96b3e6c9373a817283804796099eeb8bccacb1c987a7d4f4c101d44fad95'},
  {action = 'run', bin = 'dpkg', args = ['-i', '/kcgen_0.3.0_amd64.deb']},
  {action = 'run', bin = 'rm', args = ['/kcgen_0.3.0_amd64.deb']},
]

[optional.packages.kicad]
if.all = ["features.graphical", "features.maker"]
display_name = "KiCad"
version = "5.x.x"
packages = ["kicad", "kicad-libraries", "kicad-doc-en", "kicad-packages3d"]


[graphical_environment.post.install.atom]
if.all = ["features.graphical", "features.SWE"]
order_priority = 45
do = [
  {action = 'download', url = 'https://packagecloud.io/AtomEditor/atom/gpgkey', to = '/atom-signing-key.pub'},
  {action = 'run', bin = 'apt-key', args = ['add', '/atom-signing-key.pub']},
  {action = 'append', to = '/etc/apt/sources.list', data = "deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main\n"},
  {action = 'run', bin = 'rm', args = ['/atom-signing-key.pub']},
  {action = 'run', bin = 'apt-get', args = ['update']},
  {action = 'run', bin = 'apt-get', args = ['-y', 'install', 'atom']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install file-icons']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install language-systemd']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install go-plus']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install atom-beautify']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install language-ccr']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install language-hcl']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/usr/bin/apm install language-proto']},
]
