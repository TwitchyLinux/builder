[graphical_environment.sway]
packages = [
  # Build tools
  "ninja-build", "python3", "git", "autoconf", "libtool",
  # Libraries
  "build-essential", "cmake", "libwayland-dev", "wayland-protocols",
  "libegl1-mesa-dev", "libgles2-mesa-dev", "libdrm-dev", "libgbm-dev", "libinput-dev",
  "libxkbcommon-dev", "libudev-dev", "libpixman-1-dev", "libsystemd-dev", "libcap-dev",
  "libxcb1-dev", "libxcb-composite0-dev", "libxcb-xfixes0-dev", "libxcb-xinput-dev",
  "libxcb-image0-dev", "libxcb-render-util0-dev", "libx11-xcb-dev", "libxcb-icccm4-dev",
  "freerdp2-dev", "libwinpr2-dev", "libpng-dev", "libavutil-dev", "libavcodec-dev",
  "libavformat-dev", "universal-ctags",
  "libelogind-dev", "libxcb-util0-dev",
  "libgdk-pixbuf2.0-dev",
  # Additional components
  "dbus", "dbus-x11", "dbus-user-session", "mesa-vulkan-drivers",
  # Backwards compatibility
  "xwayland",
]
steps.build-sway.do = [
  # Meson
  {action = 'download', url = 'http://ftp.debian.org/debian/pool/main/m/meson/meson_0.56.2-1_all.deb', to = '/meson_0.56.2-1_all.deb'},
  {action = 'sha256sum', from = '/meson_0.56.2-1_all.deb', expected = 'ef6dda3268d41ceb6218da4668598242aee0b4ca1ff8394068b5243b73eb4544'},
  {action = 'run', bin = 'apt-get', args=['install', '-y', '/meson_0.56.2-1_all.deb']},
  {action = 'run', bin = 'rm', args=['/meson_0.56.2-1_all.deb']},
  {action = 'mkdir', dir = '/sway-src'},

  # Scdoc
  {action = 'download', url = 'https://git.sr.ht/~sircmpwn/scdoc/archive/1.11.1.tar.gz', to = '/sway-src/1.11.1.tar.gz'},
  {action = 'sha256sum', from = '/sway-src/1.11.1.tar.gz', expected = '1098a1ed2e087596fc0b3f657c1c8a5e00412267aa4baf3619e36824306645b1'},
  {action = 'run', bin = 'tar', args=['-C', '/sway-src', '-xvf', '/sway-src/1.11.1.tar.gz']},
  {action = 'run', bin = 'make', args = ['-C', '/sway-src/scdoc-1.11.1', 'PREFIX=/usr/local']},
  {action = 'run', bin = 'make', args = ['-C', '/sway-src/scdoc-1.11.1', 'PREFIX=/usr/local', 'install']},
  {action = 'run', bin = 'rm', args=['/sway-src/1.11.1.tar.gz']},
  {action = 'run', bin = 'rm', args=['-rf', '/sway-src/scdoc-1.11.1']},

  # Wlroots
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/swaywm/wlroots.git', '/sway-src/wlroots']},
  {action = 'run', bin = 'git', args = ['-C', '/sway-src/wlroots', 'checkout', '0.10.0']}, # 'checkout', '0.12.0'
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/wlroots && meson build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/wlroots && ninja -C build install']},

  # json-c
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/json-c/json-c.git', '/sway-src/json-c']},
  {action = 'run', bin = 'git', args = ['-C', '/sway-src/json-c', 'checkout', 'json-c-0.13.1-20180305']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/json-c && sh autogen.sh']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/json-c && ./configure --enable-threading --prefix=/usr/local']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/json-c && make "-j$(nproc)"']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/json-c && make install']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/json-c && ldconfig']},

  # Sway
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/swaywm/sway.git', '/sway-src/sway']},
  {action = 'run', bin = 'git', args = ['-C', '/sway-src/sway', 'checkout', '1.4']}, # 'checkout', '1.5.1'
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/sway && meson build -Dman-pages=enabled -Dxwayland=enabled -Dgdk-pixbuf=enabled -Dsd-bus-provider=libsystemd']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/sway && ninja -C build install']},

  # Swaybg
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/swaywm/swaybg.git', '/sway-src/swaybg']},
  {action = 'run', bin = 'git', args = ['-C', '/sway-src/swaybg', 'checkout', '1.0']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/swaybg && meson build -Dman-pages=enabled -Dgdk-pixbuf=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /sway-src/swaybg && ninja -C build install']},

  # Update perms
  {action = 'run', bin = 'chmod', args = ['u+s', '/usr/local/bin/sway']},

  # Cleanup
  {action = 'run', bin = 'rm', args = ['-rf', '/sway-src']},
]
steps.install-background.do = [
  {action = 'mkdir', dir = '/usr/share/backgrounds'},
  {action = 'install-resource', from = '../twitchy_background.png', to = '/usr/share/backgrounds/twitchy_background.png'},
]
steps.install-sway-config.do = [
  {action = 'mkdir', dir = '/etc/sway'},
  {action = 'install-resource', from = '../sway/sway.config', to = '/etc/sway/config'},
]
steps.install-sway-config-twl.do = [
  {action = 'mkdir', dir = '/home/twl/.config/sway'},
  {action = 'install-resource', from = '../sway/sway.config', to = '/home/twl/.config/sway/config'},
  {action = 'run', bin = 'chown', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config']},
  {action = 'run', bin = 'chgrp', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config']},
]
steps.install-sway-floating.do = [
  {action = 'install-resource', from = '../sway/run-floating', to = '/usr/bin/sway-float'},
  {action = 'run', bin = 'chmod', args = ['+x', '/usr/bin/sway-float']},
]
steps.install-swaynagmode.do = [
  {action = 'mkdir', dir = '/swaynagmode-src'},
  {action = 'download', url = 'https://github.com/b0o/swaynagmode/archive/v0.2.1.tar.gz', to = '/swaynagmode-src/v0.2.1.tar.gz'},
  {action = 'sha256sum', from = '/swaynagmode-src/v0.2.1.tar.gz', expected = 'f513395a27ac63192a9f188b6f4f5b36c2c5fa8fa8d71b936e6f069ec5a63f24'},
  {action = 'run', bin = 'tar', args = ['-C', '/swaynagmode-src', '-xvf', '/swaynagmode-src/v0.2.1.tar.gz']},
  {action = 'run', bin = 'cp', args = ['/swaynagmode-src/swaynagmode-0.2.1/swaynagmode', '/usr/bin/swaynagmode']},
  {action = 'run', bin = 'chmod', args = ['+x', '/usr/bin/swaynagmode']},
  {action = 'run', bin = 'rm', args = ['-rf', '/swaynagmode-src']},
]

[graphical_environment.post.install.wev]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 95
packages = ["libnotify-bin", "libnotify-dev"]
do = [
  {action = 'download', url = 'https://git.sr.ht/~sircmpwn/wev/archive/1.0.0.tar.gz', to = '/wev-1.0.0.tar.gz'},
  {action = 'sha256sum', from = '/wev-1.0.0.tar.gz', expected = '613a1df1a4879d50ce72023de14aaf05be2e6f51346e84a69f50fc6d8502bbf4'},
  {action = 'run', bin = 'tar', args = ['-v', '-xzf', '/wev-1.0.0.tar.gz']},
  {action = 'run', bin = 'rm', args = ['/wev-1.0.0.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wev-1.0.0 && make']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wev-1.0.0 && make install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/wev-1.0.0']},
]

[graphical_environment.post.install.mako]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 95
packages = ["libnotify-bin", "libnotify-dev"]
do = [
  {action = 'download', url = 'https://github.com/emersion/mako/releases/download/v1.4.1/mako-1.4.1.tar.gz', to = '/mako-1.4.1.tar.gz'},
  {action = 'sha256sum', from = '/mako-1.4.1.tar.gz', expected = '27ab63264a74389de2119393fe64fd578a4c1d04c8409990ef7cfbb6eb9309bb'},
  {action = 'run', bin = 'tar', args = ['-v', '-xzf', '/mako-1.4.1.tar.gz']},
  {action = 'run', bin = 'rm', args = ['/mako-1.4.1.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /mako-1.4.1 && meson build -Dman-pages=enabled -Dsd-bus-provider=libsystemd -Dicons=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /mako-1.4.1 && ninja -C build']},
  {action = 'run', bin = 'cp', args = ['/mako-1.4.1/build/mako', '/usr/local/bin/mako']},
  {action = 'run', bin = 'rm', args = ['-rf', '/mako-1.4.1']},
]

[graphical_environment.post.install.gammastep]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 95
packages = ["intltool"]
do = [
  {action = 'mkdir', dir = '/gammastep-src'},
  {action = 'run', bin = 'git', args = ['clone', 'https://gitlab.com/chinstrap/gammastep', '/gammastep-src/gammastep']},
  {action = 'run', bin = 'git', args = ['-C', '/gammastep-src/gammastep', 'checkout', 'v2.0.5']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /gammastep-src/gammastep && ./bootstrap']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /gammastep-src/gammastep && ./configure']},
  {action = 'run', bin = 'make', args = ['-C', '/gammastep-src/gammastep']},
  {action = 'run', bin = 'make', args = ['-C', '/gammastep-src/gammastep', 'install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/gammastep-src']},
  {action = 'mkdir', dir = '/home/twl/.config/gammastep'},
  {action = 'install-resource', from = '../sway/gammastep.ini', to = '/home/twl/.config/gammastep/config.ini'},
  {action = 'run', bin = 'chown', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/gammastep']},
  {action = 'run', bin = 'chgrp', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/gammastep']},
]

[graphical_environment.post.install.wob]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 95
packages = ["libseccomp-dev"]
do = [
  {action = 'mkdir', dir = '/wob-src'},
  {action = 'download', url = 'https://github.com/francma/wob/archive/0.10.tar.gz', to = '/wob-src/0.10.tar.gz'},
  {action = 'sha256sum', from = '/wob-src/0.10.tar.gz', expected = '706fc2469924ca34d2af60997460fc9723dc4825669a57017024906dc444654c'},
  {action = 'run', bin = 'tar', args = ['-C', '/wob-src', '-v', '-xzf', '/wob-src/0.10.tar.gz']},
  {action = 'run', bin = 'rm', args = ['/wob-src/0.10.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wob-src/wob-0.10 && meson build -Dman-pages=enabled -Dseccomp=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wob-src/wob-0.10 && ninja -C build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wob-src/wob-0.10 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/wob-src']},
]

[graphical_environment.post.install.i3status]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
packages = ["libdbus-1-dev", "fonts-font-awesome", "fonts-powerline"]
order_priority = 94
do = [
  {action = 'mkdir', dir = '/i3status-src'},
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/greshake/i3status-rust', '/i3status-src/i3status-rust']},
  {action = 'run', bin = 'git', args = ['-C', '/i3status-src/i3status-rust', 'checkout', 'v0.14.3']},
  {action = 'run', bin = 'chown', args = ['-R', 'twl', '/i3status-src/i3status-rust']},
  # TODO: Make username agnostic in below command.
  {action = 'run', bin = 'runuser', args = [
        '-l', '{{base.main_user.name}}',
        '-c', 'source $HOME/.cargo/env && cd /i3status-src/i3status-rust && cargo build --release',
  ]},
  {action = 'run', bin = 'cp', args = ['/i3status-src/i3status-rust/target/release/i3status-rs', '/usr/local/bin/i3status-rs']},
  {action = 'run', bin = 'bash', args = ['-c', 'gzip -c /i3status-src/i3status-rust/man/i3status-rs.1 | sudo tee /usr/local/share/man/man1/i3status-rs.1.gz > /dev/null']},
  {action = 'run', bin = 'rm', args = ['-rf', '/i3status-src']},
  {action = 'mkdir', dir = '/home/twl/.config/i3status-rust'},
  {action = 'install-resource', from = '../sway/i3status-rs.toml', to = '/home/twl/.config/i3status-rust/config.toml'},
  {action = 'run', bin = 'chown', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/i3status-rust']},
  {action = 'run', bin = 'chgrp', args = ['-R', '{{base.main_user.name}}', '/home/twl/.config/i3status-rust']},
]

[graphical_environment.post.install.wofi]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
packages = ["libwayland-dev", "libgtk-3-dev", "pkg-config"] # Meson should have already been installed
order_priority = 94
do = [
  {action = 'mkdir', dir = '/wofi-src'},
  {action = 'download', url = 'https://github.com/GNOME/glib/archive/2.64.2.zip', to = '/wofi-src/2.64.2.zip'},
  {action = 'sha256sum', from = '/wofi-src/2.64.2.zip', expected = '00761dcf835c97beae8a25ac060647b081113b7295d4081485b05723ea8bd0ac'},
  {action = 'run', bin = 'unzip', args = ['/wofi-src/2.64.2.zip', '-d', '/wofi-src']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/glib-2.64.2 && meson _build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/glib-2.64.2 && ninja -C _build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/glib-2.64.2 && ninja -C _build install']},

  {action = 'download', url = 'https://hg.sr.ht/~scoopta/wofi/archive/v1.2.3.tar.gz', to = '/wofi-src/v1.2.3.tar.gz'},
  {action = 'sha256sum', from = '/wofi-src/v1.2.3.tar.gz', expected = '6940a941e253942f172056aafa3f22e9647cfe080542e27331e5eefae382d4cd'},
  {action = 'run', bin = 'tar', args = ['-C', '/wofi-src', '-v', '-xzf', '/wofi-src/v1.2.3.tar.gz']},

  {action = 'run', bin = 'rm', args = ['/wofi-src/v1.2.3.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/wofi-v1.2.3 && meson build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/wofi-v1.2.3 && ninja -C build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wofi-src/wofi-v1.2.3 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/wofi-src']},
]

[graphical_environment.post.install.waypipe]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
packages = ["liblz4-dev", "pkg-config", "libdrm-dev", "libgbm-dev", "libva-dev"] # Meson + Scdoc + ninja should have already been installed
order_priority = 94
do = [
  {action = 'mkdir', dir = '/waypipe-src'},

  {action = 'download', url = 'https://gitlab.freedesktop.org/mstoeckl/waypipe/-/archive/v0.7.1/waypipe-v0.7.1.tar.gz', to = '/waypipe-src/waypipe-v0.7.1.tar.gz'},
  {action = 'sha256sum', from = '/waypipe-src/waypipe-v0.7.1.tar.gz', expected = '38ac7ff16a21a18ac0bc99162dff20601654ff412ddc7450fbae4d244f57cab9'},
  {action = 'run', bin = 'tar', args = ['-C', '/waypipe-src', '-v', '-xzf', '/waypipe-src/waypipe-v0.7.1.tar.gz']},

  {action = 'run', bin = 'rm', args = ['/waypipe-src/waypipe-v0.7.1.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /waypipe-src/waypipe-v0.7.1 && meson build -Dman-pages=enabled -Dwith_video=enabled -Dwith_dmabuf=enabled -Dwith_lz4=enabled -Dwith_vaapi=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /waypipe-src/waypipe-v0.7.1 && ninja -C build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /waypipe-src/waypipe-v0.7.1 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/waypipe-src']},
]

[graphical_environment.post.install.wl-clipboard]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
packages = ["xdg-utils", "pkg-config"] # Meson + Scdoc + ninja should have already been installed
order_priority = 94
do = [
  {action = 'mkdir', dir = '/wlclipboard-src'},

  {action = 'download', url = 'https://github.com/bugaevc/wl-clipboard/archive/v2.0.0.tar.gz', to = '/wlclipboard-src/v2.0.0.tar.gz'},
  {action = 'sha256sum', from = '/wlclipboard-src/v2.0.0.tar.gz', expected = '2c42f182432adabe56da0f1144d5fcc40b7aae3d8e14d2bc4dc4c3f91b51808d'},
  {action = 'run', bin = 'tar', args = ['-C', '/wlclipboard-src', '-v', '-xzf', '/wlclipboard-src/v2.0.0.tar.gz']},

  {action = 'run', bin = 'rm', args = ['/wlclipboard-src/v2.0.0.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wlclipboard-src/wl-clipboard-2.0.0 && meson build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wlclipboard-src/wl-clipboard-2.0.0 && ninja -C build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wlclipboard-src/wl-clipboard-2.0.0 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/wlclipboard-src']},
]

[graphical_environment.post.install.wl-recorder]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
packages = ["libavutil-dev", "libavcodec-dev", "libavformat-dev", "libswscale-dev", "libpulse-dev", "pkg-config"] # Meson + Scdoc + ninja should have already been installed
order_priority = 94
do = [
  {action = 'mkdir', dir = '/wfrecorder-src'},

  {action = 'download', url = 'https://github.com/ammen99/wf-recorder/archive/v0.2.1.tar.gz', to = '/wfrecorder-src/v0.2.1.tar.gz'},
  {action = 'sha256sum', from = '/wfrecorder-src/v0.2.1.tar.gz', expected = '45cf04cf58cf241c22fa2fbb70481a3747ad33e6930e4bdba7b9cc7018789ad1'},
  {action = 'run', bin = 'tar', args = ['-C', '/wfrecorder-src', '-v', '-xzf', '/wfrecorder-src/v0.2.1.tar.gz']},

  {action = 'run', bin = 'rm', args = ['/wfrecorder-src/v0.2.1.tar.gz']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wfrecorder-src/wf-recorder-0.2.1 && meson build --prefix=/usr --buildtype=release -Dpulse=enabled']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wfrecorder-src/wf-recorder-0.2.1 && ninja -C build']},
  {action = 'run', bin = 'bash', args = ['-c', 'cd /wfrecorder-src/wf-recorder-0.2.1 && ninja -C build install']},
  {action = 'run', bin = 'rm', args = ['-rf', '/wfrecorder-src']},
]

[graphical_environment.post.install.shortcuts]
if.not = ["features.essential"]
if.all = ["features.graphical", "features.graphical_environment == 'sway'"]
order_priority = 94
do = [
  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/shutdown.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', 's/CMD/systemctl poweroff -i/g', '/usr/share/applications/shutdown.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Shutdown/g', '/usr/share/applications/shutdown.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/system-shutdown/g', '/usr/share/applications/shutdown.desktop']},

  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/reboot.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', 's/CMD/systemctl reboot/g', '/usr/share/applications/reboot.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Reboot/g', '/usr/share/applications/reboot.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/system-reboot/g', '/usr/share/applications/reboot.desktop']},
  {action = 'append', to = '/usr/share/applications/reboot.desktop', data = "\nKeywords=restart"},

  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/configure-network.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', 's/CMD/nmtui/g', '/usr/share/applications/configure-network.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Configure networking/g', '/usr/share/applications/configure-network.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/preferences-system-network/g', '/usr/share/applications/configure-network.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/Terminal=false/Terminal=true/g', '/usr/share/applications/configure-network.desktop']},

  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/screenshot-selection.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', "s/CMD/bash -c 'grim -g \"$(slurp)\"'/g", '/usr/share/applications/screenshot-selection.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Screenshot selection (to file)/g', '/usr/share/applications/screenshot-selection.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/camera-web/g', '/usr/share/applications/screenshot-selection.desktop']},

  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/screenshot-clipboard.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', "s/CMD/bash -c 'grim -g \"$(slurp)\" - | wl-copy'/g", '/usr/share/applications/screenshot-clipboard.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Screenshot selection (to clipboard)/g', '/usr/share/applications/screenshot-clipboard.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/camera-web/g', '/usr/share/applications/screenshot-clipboard.desktop']},

  {action = 'install-resource', from = '../sway/shortcut-template', to = '/usr/share/applications/record-region.desktop'},
  {action = 'run', bin = 'sed', args = ['-i', "s/CMD/bash -c 'wf-recorder -g \"$(slurp)\"'/g", '/usr/share/applications/record-region.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/NAME/Record selection (to file)/g', '/usr/share/applications/record-region.desktop']},
  {action = 'run', bin = 'sed', args = ['-i', 's/ICON/camera-video/g', '/usr/share/applications/record-region.desktop']},
]
