[post_base.install.c-toolchain]
if.any = ["features.SWE"]
order_priority = 90
packages = ["build-essential", "cmake", "sqlite3", "libsqlite3-0", "libsqlite3-dev", "sqlite3-doc"]

[post_base.install.c-toolchain-arm]
if.any = ["features.embedded"]
order_priority = 90
packages = ["gcc-arm-none-eabi"]

[post_base.install.rust]
if.any = ["features.SWE"]
order_priority = 89
do = [
  {action = 'download', url = 'https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init', to = '/rustup-init'},
  {action = 'run', bin = 'chmod', args = ['+x', '/rustup-init']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '/rustup-init --verbose --no-modify-path -y --default-toolchain stable']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '.cargo/bin/rustup target add thumbv7em-none-eabihf']},
  {action = 'run', bin = 'runuser', args = ['-l', '{{base.main_user.name}}', '-c', '.cargo/bin/rustup target add thumbv6m-none-eabi']},
  {action = 'run', bin = 'rm', args = ['/rustup-init']},
  # TODO: Make username agnostic in below command.
  {action = 'append', to = '/home/twl/.bashrc', data = "\n# Start rustup section\nsource $HOME/.cargo/env\n# End rustup section\n"},
]

[post_base.install.golang]
if.any = ["features.SWE"]
order_priority = 89
do = [
  {action = 'download', url = 'https://golang.org/dl/go1.15.5.linux-amd64.tar.gz', to = '/go1.15.5.linux-amd64.tar.gz'},
  {action = 'sha256sum', from = '/go1.15.5.linux-amd64.tar.gz', expected = '9a58494e8da722c3aef248c9227b0e9c528c7318309827780f16220998180a0d'},
  {action = 'run', bin = 'tar', args = ['-v', '-C', '/usr/local', '-xzf', '/go1.15.5.linux-amd64.tar.gz']},
  {action = 'run', bin = 'rm', args = ['/go1.15.5.linux-amd64.tar.gz']},
  {action = 'append', to = '/etc/profile.d/golang.sh', data = "# Make Go tools available via path\nexport PATH=$PATH:/usr/local/go/bin\n"},
]

[post_base.install.protoc]
if.any = ["features.SWE"]
order_priority = 88
do = [
  {action = 'download', url = 'https://github.com/protocolbuffers/protobuf/releases/download/v3.14.0/protoc-3.14.0-linux-x86_64.zip', to = '/protoc-3.14.0.zip'},
  {action = 'sha256sum', from = '/protoc-3.14.0.zip', expected = 'a2900100ef9cda17d9c0bbf6a3c3592e809f9842f2d9f0d50e3fba7f3fc864f0'},
  {action = 'run', bin = 'unzip', args = ['/protoc-3.14.0.zip', '-d', '/usr/local/protoc']},
  {action = 'run', bin = 'rm', args = ['/protoc-3.14.0.zip']},
  {action = 'append', to = '/etc/profile.d/protoc.sh', data = "# Make protoc available via path\nexport PATH=$PATH:/usr/local/protoc/bin\n"},
]

[post_base.install.gui-libs]
if.any = ["features.SWE"]
order_priority = 88
packages = ["mesa-utils", "libgtk-3-dev", "libcairo2-dev", "libglib2.0-dev", "libwxgtk3.0-gtk3-dev"]

[post_base.install.skopeo]
if.any = ["features.container_tools"]
order_priority = 88
packages = ["libgpgme-dev", "libassuan-dev", "libbtrfs-dev", "libdevmapper-dev"]
do = [
  {action = 'mkdir', dir = '/skopeo/gopath'},
  {action = 'mkdir', dir = '/skopeo/head'},
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/containers/skopeo', '/skopeo/head']},
  {action = 'run', bin = 'bash', args = ['-c', 'GOPATH=/skopeo/gopath cd /skopeo/head && /usr/local/go/bin/go build -o /usr/bin/skopeo ./cmd/skopeo']},
  {action = 'run', bin = 'rm', args = ['-rf', '/skopeo']},
]

[post_base.install.umoci]
if.any = ["features.container_tools"]
order_priority = 88
packages = ["libgpgme-dev", "libassuan-dev", "libbtrfs-dev", "libdevmapper-dev"]
do = [
  {action = 'mkdir', dir = '/umoci/gopath'},
  {action = 'mkdir', dir = '/umoci/head'},
  {action = 'run', bin = 'git', args = ['clone', 'https://github.com/openSUSE/umoci', '/umoci/head']},
  {action = 'run', bin = 'bash', args = ['-c', 'GOPATH=/umoci/gopath cd /umoci/head && export V=$(cat /umoci/head/VERSION) && /usr/local/go/bin/go build -buildmode=pie -ldflags "-s -w -X main.version=${V}" -o /usr/bin/umoci ./cmd/umoci']},
  {action = 'run', bin = 'rm', args = ['-rf', '/umoci']},
]

[post_base.install.esp8266]
if.all = ["features.maker"]
order_priority = 88
packages = ["python3-pip"]
do = [
  # TODO: download and setup nodemcu-uploader from github (pip is out of date).
  {action = 'run', bin = 'pip3', args = ['install', 'esptool']},
  {action = 'run', bin = 'pip3', args = ['install', 'nodemcu-uploader']},
]
